# AgileManager - Sistema de Gest√£o de Estoque

Este projeto √© um sistema web para controle de estoque multi-loja, desenvolvido como Projeto Integrador do **Curso T√©cnico em Inform√°tica** do **Senac S√£o Paulo**.

## üìã Descri√ß√£o

O AgileManager permite o cadastro de usu√°rios, gerenciamento de produtos, movimenta√ß√£o de estoque entre lojas, controle de entradas e sa√≠das, al√©m de dashboards com gr√°ficos para an√°lise r√°pida. O sistema possui n√≠veis de acesso (funcion√°rio, gerente, admin) e fluxo de aprova√ß√£o de novos usu√°rios.

## üöÄ Como usar

### 1. Pr√©-requisitos

- Node.js (v16+)
- MySQL Server

### 2. Instala√ß√£o

Clone o reposit√≥rio e instale as depend√™ncias:

```
git clone https://github.com/seu-usuario/seu-repo.git
cd projeto_integrador_Vesix_Node.js
npm install
```

### 3. Configura√ß√£o do Banco de Dados

Crie o banco de dados e as tabelas necess√°rias. **Cole o SQL abaixo no seu MySQL**:

````sql
-- COLE O SCRIPT ABAIXO NO SEU BANCO DE DADOS
CREATE DATABASE IF NOT EXISTS estoque_vesix;
USE estoque_vesix;

CREATE TABLE usuario (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    senha VARCHAR(255) NOT NULL,
    nivel_acesso ENUM('funcionario', 'gerente', 'admin') NOT NULL DEFAULT 'funcionario',
    ativo BOOLEAN DEFAULT 0
);

CREATE TABLE loja (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL
);

CREATE TABLE usuario_loja (
    usuario_id INT,
    loja_id INT,
    PRIMARY KEY (usuario_id, loja_id),
    FOREIGN KEY (usuario_id) REFERENCES usuario(id) ON DELETE CASCADE,
    FOREIGN KEY (loja_id) REFERENCES loja(id) ON DELETE CASCADE
);

CREATE TABLE Produto (
    id_produto INT PRIMARY KEY AUTO_INCREMENT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    sku VARCHAR(100) NOT NULL UNIQUE,
    preco_compra DECIMAL(10,2) NOT NULL,
    fornecedor_nome VARCHAR(100) NOT NULL
);

CREATE TABLE estoque_loja (
    id INT AUTO_INCREMENT PRIMARY KEY,
    id_produto INT NOT NULL,
    id_loja INT NOT NULL,
    quantidade INT NOT NULL,
    preco_venda DECIMAL(10,2) NOT NULL,
    data_registro DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_produto) REFERENCES Produto(id_produto),
    FOREIGN KEY (id_loja) REFERENCES loja(id)
);

CREATE TABLE Historico_Estoque (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tipo_acao VARCHAR(50) NOT NULL,
    id_produto INT,
    id_estoque_loja INT,
    id_loja_origem INT,
    id_loja_destino INT,
    quantidade INT,
    usuario_id INT,
    data_acao DATETIME DEFAULT CURRENT_TIMESTAMP,
    detalhes TEXT,
    FOREIGN KEY (id_produto) REFERENCES Produto(id_produto) ON DELETE SET NULL,
    FOREIGN KEY (id_estoque_loja) REFERENCES estoque_loja(id) ON DELETE SET NULL,
    FOREIGN KEY (id_loja_origem) REFERENCES loja(id),
    FOREIGN KEY (id_loja_destino) REFERENCES loja(id),
    FOREIGN KEY (usuario_id) REFERENCES usuario(id)
);

INSERT INTO loja (nome) VALUES ('Loja Principal'), ('Loja 1'), ('Loja 2');


-- Exemplo de usu√°rio root:
-- Senha: root123
INSERT INTO usuario (nome, email, senha, ativo, nivel_acesso)
VALUES (
    'root',
    'root@empresa.com',
    '$2b$10$wQw8Qw8Qw8Qw8Qw8Qw8QwOQw8Qw8Qw8Qw8Qw8Qw8Qw8Qw8Qw8QW',
    TRUE,
    'admin'
);

INSERT INTO usuario_loja (usuario_id, loja_id) VALUES
(1, 1),
(1, 2),
(1, 3);

### 4. Configura√ß√£o do Servidor

No arquivo [`index.js`](index.js ), ajuste as credenciais do banco de dados conforme seu ambiente:

```js
const db = mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '', // sua senha
    database: 'estoque_vesix'
});
```

### 5. Executando o Projeto

Inicie o servidor:

```
npm start
```

Acesse no navegador: [http://localhost:3000](http://localhost:3000)

---

## üë§ Usu√°rios e Fluxo

- **Cadastro:** Novos usu√°rios se cadastram e aguardam aprova√ß√£o do administrador.
- **Login:** Ap√≥s aprova√ß√£o, podem acessar o sistema conforme o n√≠vel de acesso.
- **Admin:** Aprova usu√°rios, gerencia lojas, produtos e usu√°rios.
- **Gerente/Funcion√°rio:** Gerenciam produtos e movimenta√ß√µes conforme permiss√µes.

---

## üìä Funcionalidades

- Cadastro e aprova√ß√£o de usu√°rios
- Controle de estoque por loja
- Entradas, sa√≠das e transfer√™ncias de produtos
- Dashboard com gr√°ficos de movimenta√ß√£o, vendas e estoque
- Hist√≥rico detalhado de movimenta√ß√µes
- Gerenciamento de permiss√µes e lojas por usu√°rio

---

## üìù Exemplos de Uso

### 1. Cadastro de Produto
1. Fa√ßa login como admin, gerente ou funcion√°rio autorizado.
2. No menu lateral, clique em "Estoque" ou "Produtos".
3. Clique em "Adicionar Produto".
4. Preencha os campos obrigat√≥rios (nome, SKU, pre√ßo de compra, fornecedor, etc).
5. Clique em "Salvar". O produto ser√° cadastrado e poder√° ser visualizado na lista.

### 2. Aprova√ß√£o de Usu√°rio
1. Fa√ßa login como admin.
2. No menu, acesse "Usu√°rios" ou "Aprova√ß√£o de Cadastros".
3. Veja a lista de usu√°rios pendentes.
4. Clique em "Aprovar" ao lado do usu√°rio desejado.
5. O usu√°rio receber√° permiss√£o para acessar o sistema.

### 3. Movimenta√ß√£o de Estoque (Entrada/Sa√≠da/Transfer√™ncia)
1. Acesse o menu "Estoque".
2. Selecione o produto desejado.
3. Escolha a a√ß√£o: Entrada, Sa√≠da ou Transfer√™ncia.
4. Informe a quantidade e, se necess√°rio, a loja de destino.
5. Confirme a opera√ß√£o. O hist√≥rico ser√° atualizado automaticamente.

### 4. Visualizar Dashboard
1. Fa√ßa login e acesse o menu "Dashboard".
2. Veja gr√°ficos de movimenta√ß√£o, estoque atual e vendas.
3. Use filtros para visualizar por loja, per√≠odo ou produto.

### 5. Gerenciar Permiss√µes de Usu√°rio
1. Apenas admins podem alterar permiss√µes.
2. No menu "Usu√°rios", selecione o usu√°rio.
3. Altere o n√≠vel de acesso (funcion√°rio, gerente) conforme necess√°rio.
4. Salve as altera√ß√µes.

---

## ‚úçÔ∏è Cr√©ditos

Projeto Integrador desenvolvido por Jos√© Elias Herm√≠nio Mendes e Paulo Henrique Pereira Rosa, alunos do  
**Curso T√©cnico em Inform√°tica**  
**Senac S√£o Paulo**

---

## üìÑ Licen√ßa

Este projeto √© acad√™mico e de uso livre para fins educacionais.

---

**D√∫vidas?**  
Abra uma issue ou entre em contato!
